<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AL_doublePointer</title>
      <link href="/2022/03/02/al-doublepointer/"/>
      <url>/2022/03/02/al-doublepointer/</url>
      
        <content type="html"><![CDATA[<h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h2><p><img src="/2022/03/02/al-doublepointer/1645971484076-c26dec60-ae41-4a8d-a968-accbb4563304.png" alt="img"></p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>反转链表，仅仅需要扭转链表的指向顺序即可，如果用双指针实现的话，一个快指针，一个慢指针指向相邻的两个结点，并将结点的指向顺序改变即可。</p><p>思考一些细节问题，在扭转之前，我们需要一个空指针作为扭转后的尾部。</p><p>好，看代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ListNode<span class="token operator">*</span> p0 <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>      ListNode<span class="token operator">*</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      ListNode<span class="token operator">*</span> p2 <span class="token operator">=</span> p1<span class="token operator">-></span>next<span class="token punctuation">;</span>            p1<span class="token operator">-></span>next <span class="token operator">=</span> p0<span class="token punctuation">;</span>          p0 <span class="token operator">=</span> p1<span class="token punctuation">;</span>          p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> p0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有几个点需要注意：</p><ul><li><p>p0 作为 左指针， p1作为右指针</p></li><li><p>line6 首先要记录下p1的下一个指针，因为反转之后就变了</p></li><li><p>line8 一定要在line9之前</p></li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ListNode<span class="token operator">*</span> p0 <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> p2 <span class="token operator">=</span> p1<span class="token operator">-></span>next<span class="token punctuation">;</span>              p1<span class="token operator">-></span>next <span class="token operator">=</span> p0<span class="token punctuation">;</span>            p0 <span class="token operator">=</span> p1<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> p0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><p><img src="/2022/03/02/al-doublepointer/1645954811592-dbacf012-5d2b-48ba-838d-064cc1b87c71.png" alt="img"></p><h3 id="基本思路："><a href="#基本思路：" class="headerlink" title="基本思路："></a>基本思路：</h3><p>常规思路是先求出链表的长度，然后找到删去的结点删除，但要进行两次遍历。</p><p>如何才能够通过一次遍历实现呢？双指针中的快慢指针，让两个指针差n个单位，就可以找出要删除的结点进行删除。</p><p>那很容易想到应该写如下代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> ptr1 <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> ptr1 <span class="token operator">=</span> ptr1<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> ptr2 <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ptr1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ptr1 <span class="token operator">=</span> ptr1<span class="token operator">-></span>next<span class="token punctuation">;</span>    ptr2 <span class="token operator">=</span> ptr2<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们思考上述代码会出现怎样的问题，我们只思考指针ptr2的起始位置即可。</p><p>以官方第一个例子为例</p><p><strong>输入：</strong>head &#x3D; [1,2,3,4,5], n &#x3D; 2 </p><p><strong>输出：</strong>[1,2,3,5]</p><p>ptr2指向第一个结点的时候，ptr1指向第三个结点，那么当ptr1指向nullptr时，ptr2 刚好指向倒数第2个结点。</p><p>这样我们就无法删除该结点，因此我们需要ptr2指向倒数第3个结点，那很好解决，直接让ptr1多走一个即可。</p><p>但还会出现问题，如果链表只有一个结点，并且n&#x3D;1，那么代码2-4行就会报错。那么怎么解决呢？既然ptr1不能多往后移动，那么我们可以让ptr2多往前移动。（注：当然可以将特殊情况摘出，但算法追求的更是一种通用解法）那么我们就需要在head前添加一个哑结点。</p><p>即</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> ptr1 <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> ptr1 <span class="token operator">=</span> ptr1<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>ListNode<span class="token operator">*</span> ptr2 <span class="token operator">=</span> dummy<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ptr1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ptr1 <span class="token operator">=</span> ptr1<span class="token operator">-></span>next<span class="token punctuation">;</span>    ptr2 <span class="token operator">=</span> ptr2<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteNodenList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ListNode<span class="token operator">*</span> ptr1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ptr1 <span class="token operator">=</span> ptr1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ListNode<span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> ptr2 <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptr1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ptr1 <span class="token operator">=</span> ptr1<span class="token operator">-></span>next<span class="token punctuation">;</span>            ptr2 <span class="token operator">=</span> ptr2<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ptr2<span class="token operator">-></span>next <span class="token operator">=</span> ptr2<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 找工作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
